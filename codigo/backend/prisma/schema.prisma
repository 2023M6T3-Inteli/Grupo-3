generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id            String          @id @default(uuid())
  title         String
  description   String
  image         String
  active        Boolean
  content       String
  createdAt     DateTime        @default(now())
  comments      Comments[]
  likes         Likes[]
  notifications Notifications[]
  tags          Tags[]
  userPost      UserPost[]
}

model MLTable {
  id            String          @id @default(uuid())
  userID        String
  tags          String
  User          User            @relation(fields: [userID], references: [id], onDelete: Cascade)
  notifications Notifications[]

  @@index([userID], map: "MLTable_userID_fkey")
}

model Notifications {
  id          String  @id @default(uuid())
  title       String
  postID      String
  description String
  mlTableID   String
  mltable     MLTable @relation(fields: [mlTableID], references: [id], onDelete: Cascade)
  post        Post    @relation(fields: [postID], references: [id], onDelete: Cascade)

  @@index([mlTableID], map: "Notifications_mlTableID_fkey")
  @@index([postID], map: "Notifications_postID_fkey")
}

model FAQ {
  id       String @id @default(uuid())
  question String
  answer   String
}

model Likes {
  id     String @id @default(uuid())
  count  Int
  userID String
  postID String
  post   Post   @relation(fields: [postID], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@index([postID], map: "Likes_postID_fkey")
  @@index([userID], map: "Likes_userID_fkey")
}

model Comments {
  id      String @id @default(uuid())
  userID  String
  postID  String
  content String
  post    Post   @relation(fields: [postID], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@index([postID], map: "Comments_postID_fkey")
  @@index([userID], map: "Comments_userID_fkey")
}

model Tags {
  id        String   @id @default(uuid())
  userID    String?
  postID    String?
  subject   String
  createdAt DateTime @default(now())
  post      Post?    @relation(fields: [postID], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@index([postID], map: "Tags_postID_fkey")
  @@index([userID], map: "Tags_userID_fkey")
}

model UserPost {
  id     String @id @default(uuid())
  userID String
  postID String
  post   Post   @relation(fields: [postID], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@index([postID], map: "UserPost_postID_fkey")
  @@index([userID], map: "UserPost_userID_fkey")
}

model User {
  id             String     @id @default(uuid())
  name           String
  admin          Boolean    @default(false)
  score          Int?       @default(0)
  hashedPassword String
  location       String?    @default("")
  role           String?    @default("")
  acceptTerms    Boolean    @default(true)
  curriculum     String?    @default("")
  image          String?    @default("")
  username       String     @unique
  email          String     @unique
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  hashedRt       String?
  firstLogin     Boolean    @default(false)
  lastLogin      String     @default("")
  streak         Int        @default(0)
  comments       Comments[]
  likes          Likes[]
  MLTable        MLTable[]
  tags           Tags[]
  userPost       UserPost[]

  @@map("users")
}
