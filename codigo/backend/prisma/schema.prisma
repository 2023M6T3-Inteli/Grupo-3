// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String
  username      String          @unique
  image         String          @default("")
  location      String          @default("")
  acceptTerms   Boolean         @default(true)
  admin         Boolean         @default(false)
  role          String          @default("")
  score         Int             @default(0)
  curriculum    String          @default("")
  mltable       MLTable[]
  likes         Likes[]
  comments      Comments[]
  tags          Tags[]
  userPost      UserPost[]
}

model Post{
  id            String          @id @default(uuid())
  title         String          
  description   String
  image         String
  content       String
  active        Boolean
  notifications Notifications[]
  likes         Likes[]
  comments      Comments[]
  tags          Tags[]
  userPost      UserPost[]
}

model MLTable{
  id            String          @id @default(uuid())
  user          User            @relation(fields: [userID], references: [id])
  userID        String  
  tags          String
  notifications Notifications[]        
}

model Notifications{
  id            String          @id @default(uuid())
  title         String          
  description   String
  mltable       MLTable         @relation(fields: [mlTableID], references: [id])
  mlTableID     String
  post          Post            @relation(fields: [postID], references: [id])
  postID        String
}

model FAQ{
  id            String          @id @default(uuid())
  question      String
  answer        String
}

model Likes{
  id            String          @id @default(uuid())
  count         Int
  user          User            @relation(fields: [userID], references: [id])
  userID        String
  post          Post            @relation(fields: [postID], references: [id])
  postID        String
}

model Comments{
  id            String          @id @default(uuid())
  content       String
  user          User            @relation(fields: [userID], references: [id])
  userID        String
  post          Post            @relation(fields: [postID], references: [id])
  postID        String
}

model Tags{
  id            String          @id @default(uuid())
  user          User            @relation(fields: [userID], references: [id])
  userID        String
  post          Post            @relation(fields: [postID], references: [id])
  postID        String
}

model UserPost{
  id            String           @id @default(uuid())
  user          User             @relation(fields: [userID], references: [id])
  userID        String
  post          Post             @relation(fields: [postID], references: [id])
  postID        String  
}
